<?php
/**
 * \Elabftw\Elabftw\Upgrade
 *
 * @author Nicolas CARPi <nicolas.carpi@curie.fr>
 * @copyright 2012 Nicolas CARPi
 * @see http://www.elabftw.net Official website
 * @license AGPL-3.0
 * @package elabftw
 */
namespace Elabftw\Elabftw;

use \Exception;
use \ZipArchive;

/**
 * Use this to upgrade an installation
 *
 */
class Upgrade extends Update
{
    /** where we will store our zip archive */
    private $zipPath = ELAB_ROOT . 'uploads/tmp/latest.zip';

    /**
     * Upgrade the install by downloading latest zip, extracting it and copying files.
     *
     * @throws Exception if unhappy
     */
    public function __construct()
    {
        if (!$this->checkIsWritable()) {
            throw new Exception('Cannot write to installation directory. Fix permissions to use auto upgrade feature.');
        }
        $this->enableMaintenanceMode();
        $this->getUpdatesIni();
        // get the latest zip archive
        $this->get($this->url, $this->zipPath);

        // verify its integrity
        if (!$this->checksumZip()) {
            throw new Exception('Cannot validate zip archive!');
        }

        $this->extractZip();

        $this->disableMaintenanceMode();
    }

    /**
     * Make sure we can actually write to the install directory
     *
     * @return bool
     */
    private function checkIsWritable()
    {
        return is_writable(ELAB_ROOT);
    }

    /**
     * Add the maintenance file, disabling everything
     */
    private function enableMaintenanceMode()
    {
        file_put_contents(ELAB_ROOT . 'maintenance', '1');
    }

    /**
     * Open the gates of Science!
     */
    private function disableMaintenanceMode()
    {
        if (file_exists(ELAB_ROOT . 'maintenance')) {
            unlink(ELAB_ROOT . 'maintenance');
        }
    }

    /**
     * Verify integrity of zip archive with sha512.
     *
     * @return bool true if the archive has correct checksum
     */
    private function checksumZip()
    {
        $hash = hash_file('sha512', $this->zipPath);
        return $hash === $this->sha512;
    }

    /*
     * Extract the archive.
     * FIXME
     *
     */
    private function extractZip()
    {
        $zip = new \ZipArchive;
        if ($zip->open($this->zipPath)) {
            // $i starts with 1 because the first entry is just the directory containing everything
            for ($i = 1; $i < $zip->numFiles; $i++) {
                //$zip->extractTo(ELAB_ROOT, array(substr($zip->getNameIndex($i), strpos($zip->getNameIndex($i), '/') + 1)));
            }
            $zip->close();
        }
    }
}

